<?php
/**
 * @file
 * Custom functionality for DinoDay site.
 */

/**
 * Defined this module path.
 */
define('CUSTOM_MODULE_PATH', drupal_get_path('module', 'custom'));

require_once CUSTOM_MODULE_PATH . '/pages/collection.page.inc';
require_once CUSTOM_MODULE_PATH . '/pages/food.page.inc';
require_once CUSTOM_MODULE_PATH . '/pages/settings.page.inc';
require_once CUSTOM_MODULE_PATH . '/pages/statistics.page.inc';
require_once CUSTOM_MODULE_PATH . '/dino_cron.inc';

/**
 * Implements hook_menu().
 */
function custom_menu() {
  $items = [];
  $weight = 0;

  $items['collection'] = [
    'title' => 'Коллекция',
    'menu_name' => 'main-menu',
    'page callback' => 'custom_collection_page',
    'access callback' => TRUE,
    'weight' => $weight++,
  ];
  $items['collection/%ctools_js'] = [
    'title' => 'Регистрация',
    'page arguments' => [1],
    'access callback' => TRUE,
    'page callback' => 'custom_register_popup',
    'type' => MENU_CALLBACK,
  ];
  $items['food'] = [
    'title' => 'Пища',
    'menu_name' => 'main-menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['custom_food_form'],
    'access callback' => 'user_is_logged_in',
    'weight' => $weight++,
  ];
  $items['settings'] = [
    'title' => 'Настройки',
    'menu_name' => 'main-menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['custom_settings_form'],
    'access callback' => 'user_is_logged_in',
    'weight' => $weight++,
  ];
  $items['statistics'] = [
    'title' => 'Статистика',
    'menu_name' => 'main-menu',
    'page callback' => 'custom_statistics_page',
    'access callback' => TRUE,
    'weight' => $weight++,
  ];

  return $items;
}

/**
 * Implements hook_theme().
 */
function custom_theme($existing, $type, $theme, $path) {
  $templates = drupal_get_path('theme', 'dino') . '/templates';

  return [
    'dinosaur_info' => [
      'variables' => [
        'dinosaur_entity' => NULL,
      ],
      'path' => $templates,
      'template' => 'dinosaur-info',
    ],
    'dinosaur_undefined_info' => [
      'variables' => [
        'dinosaur_entity' => NULL,
      ],
      'path' => $templates,
      'template' => 'dinosaur-undefined-info',
    ],
  ];
}

/**
 * User register in popup.
 *
 * @param $js
 *
 * @return array|mixed
 */
function custom_register_popup($js) {
  if (!$js) {
    return drupal_get_form('user_register_form');
  }

  ctools_include('ajax');
  ctools_include('modal');

  $form_state = [
    'ajax' => TRUE,
    'title' => 'Регистрация',
  ];
  $output = ctools_modal_form_wrapper('user_register_form', $form_state);
  print ajax_render($output);
  drupal_exit();
}

/**
 * Implements hook_form_alter().
 */
function custom_form_alter(&$form, &$form_state, $form_id) {
  // @todo Fix it after i18n install.
  switch ($form_id) {
    case 'user_login_block':
      $form['name']['#title'] = 'Логин';
      $form['pass']['#title'] = 'Пароль';
      $form['links'] = [
        '#type' => 'link',
        '#title' => 'Создать новый аккаунт',
        '#href' => 'collection/nojs',
        '#attributes' => [
          'class' => [
            'ctools-use-modal',
            'ctools-modal-dino-popup',
          ],
        ],
        '#prefix' => '<div class="register-link">',
        '#suffix' => '</div>',
      ];
      $form['links']['#weight'] = 20;
      $form['#attributes'] = [
        'class' => ['authorization', 'columns', 'medium-6'],
      ];
      $form['actions']['submit']['#value'] = 'Войти';
      $form['actions']['#weight'] = 10;
      break;

    case 'user_register_form':
      $form['account']['name']['#title'] = 'Логин';
      $form['account']['name']['#description'] = '';
      $form['account']['mail']['#title'] = 'E-mail';
      $form['account']['mail']['#description'] = '';
      $form['account']['pass']['#description'] = '';
      $form['actions']['submit']['#value'] = 'Создать аккаунт';
      $form['actions']['submit']['#ajax'] = [
        'callback' => 'custom_user_register_ajax_callback',
      ];
      break;
  }
}

/**
 * Reload page after register.
 *
 * @param $form
 * @param $form_state
 */
function custom_user_register_ajax_callback($form, $form_state) {
  ctools_include('ajax');
  ctools_add_js('ajax-responder');

  print ajax_render([ctools_ajax_command_reload()]);
  drupal_exit();
}

/**
 * Popup's settings function.
 */
function custom_ctools_popup_style() {
  static $added = FALSE;
  if ($added == FALSE) {
    $added = TRUE;

    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_add_js();

    $popup_style = [
      'dino-popup' => [
        'modalSize' => [
          'type' => 'fixed',
          'width' => 450,
          'height' => 'auto',
        ],
        'modalOptions' => [
          'opacity' => (float) 0.8,
          'background-color' => '#ccc',
        ],
        'closeText' => '&times;',
        'loadingText' => '',
        'animation' => 'fadeIn',
        'modalTheme' => 'customPopupTheme',
        'animationSpeed' => 'fast',
      ],
    ];
    drupal_add_js($popup_style, 'setting');
    ctools_add_js('popup_style', 'custom');
  }
}

/**
 * Implements hook_block_info().
 */
function custom_block_info() {
  $blocks = [];

  $blocks['timer'] = [
    'info' => 'Timer',
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -1,
    'status' => TRUE,
    'region' => 'header',
  ];
  $blocks['catch'] = [
    'info' => 'Catch dino',
    'cache' => DRUPAL_NO_CACHE,
    'weight' => 0,
    'status' => TRUE,
    'region' => 'header',
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function custom_block_view($delta = '') {
  $block = [];
  switch ($delta) {
    case 'timer':
      $block['content'] = [];
      $block['content']['form'] = drupal_get_form('custom_timer_form');
      $block['content']['food_reward_wrapper'] = [
        '#type' => 'container',
        '#attributes' => [
          'id' => 'food-reward-wrapper',
        ],
      ];
      break;

    case 'catch':
      $block['content'] = drupal_get_form('custom_catch_form');
      break;
  }
  return $block;
}

/**
 * Form with button and timer if button clicked.
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 * @throws \Exception
 */
function custom_timer_form($form, &$form_state) {
  global $user;

  // Wrapper for ajax.
  $form['container'] = [
    '#type' => 'container',
    '#attributes' => [
      'id' => 'timer-wrapper',
    ],
  ];

  if ($user->uid) {
    if ($user->timer <= time()) {
      $form['container']['start_timer'] = [
        '#type' => 'button',
        '#value' => 'Получить ингредиент',
        '#ajax' => [
          'callback' => 'custom_timer_ajax_callback',
          'wrapper' => 'custom-timer-form',
          'progress' => FALSE,
        ],
      ];
    }
    else {
      $form['container']['timer'] = [
        '#markup' => theme('html_tag', [
          'element' => [
            '#tag' => 'h2',
            '#attributes' => [
              'class' => 'active-timer',
            ],
            '#value' => date('i:s', $user->timer - time()),
          ],
        ]),
      ];
    }

    $form['#attached'] = [
      'js' => [
        drupal_get_path('module', 'custom') . '/js/timer.js',
      ],
    ];
  }

  return $form;
}

/**
 * Ajax callback for timer form.
 *
 * @param $form
 * @param $form_state
 *
 * @return array|mixed
 * @throws \Exception
 */
function custom_timer_ajax_callback($form, &$form_state) {
  global $user;

  // Save timestamp when user can click the button again.
  $user->timer = time() + variable_get('timer_duration', 30) * 60;
  // Save food ID to user.
  $user_food = explode(',', $user->food);
  $random_food_id = rand(1, 16);
  array_push($user_food, $random_food_id);
  $user->food = implode(',', $user_food);

  user_save($user);

  $commands = [];
  $custom_timer_form = drupal_get_form('custom_timer_form');
  $custom_food_form = drupal_get_form('custom_food_form');
  $commands[] = ajax_command_replace('#timer-wrapper', drupal_render($custom_timer_form['container']));
  $commands[] = ajax_command_replace('#custom-food-form', '<div id="custom-food-form">' . drupal_render($custom_food_form) . '</div>');

  $food_entity = entity_load_single('food', $random_food_id);
  $commands[] = ajax_command_html('#food-reward-wrapper', "<img src='{$food_entity->picture}' />");

  return ['#type' => 'ajax', '#commands' => $commands];
}

/**
 * Form with image indicates that bait was established.
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 * @throws \Exception
 */
function custom_catch_form($form, &$form_state) {
  global $user;

  if ($user->uid) {
    // Wrapper for ajax.
    $form['container'] = [
      '#type' => 'container',
      '#attributes' => [
        'id' => 'catch-wrapper',
      ],
    ];

    if ($user->catch) {
      $form['container']['img'] = [
        '#markup' => theme('image', [
          'path' => FOOD_PICTURE_DIR . '/other/dish.svg',
          'attributes' => [
            'id' => 'catch-indicator',
          ],
        ]),
      ];
      $form['container']['cancel'] = [
        '#type' => 'button',
        '#value' => 'Убрать наживку',
        '#ajax' => [
          'callback' => 'custom_catch_cancel_ajax_callback',
          'effect' => 'fade',
          'progress' => FALSE,
        ],
        '#attributes' => [
          'class' => ['catch-cancel', 'secondary'],
        ],
      ];
    }
  }

  return $form;
}

/**
 * Cancel catch.
 *
 * @param $form
 * @param $form_state
 *
 * @return array|mixed
 * @throws \Exception
 */
function custom_catch_cancel_ajax_callback($form, &$form_state) {
  global $user;

  $user_food = explode(',', $user->food);
  array_push($user_food, $user->catch);
  $user->food = implode(',', $user_food);

  $user->catch = 0;

  user_save($user);

  $custom_catch_form = drupal_get_form('custom_catch_form');
  $custom_food_form = drupal_get_form('custom_food_form');
  $commands = [];
  $commands[] = ajax_command_replace('#catch-wrapper', drupal_render($custom_catch_form['container']));
  $commands[] = ajax_command_replace('#custom-food-form', '<div id="custom-food-form">' . drupal_render($custom_food_form) . '</div>');

  return ['#type' => 'ajax', '#commands' => $commands];
}
