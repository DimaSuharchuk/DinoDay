<?php

/**
 * @file
 * Custom functionality for DinoDay site.
 */

module_load_include('inc', 'custom', 'pages/collection.page');
module_load_include('inc', 'custom', 'pages/inventory.page');
module_load_include('inc', 'custom', 'pages/settings.page');
module_load_include('inc', 'custom', 'pages/leaderboard.page');
module_load_include('inc', 'custom', 'dino_cron');

/**
 * Implements hook_menu().
 */
function custom_menu() {
  $items = [];

  $items['collection'] = [
    'title' => 'Collection',
    'menu_name' => 'main-menu',
    'page callback' => 'custom_collection_page',
    'access callback' => TRUE,
  ];
  $items['collection/%ctools_js'] = [
    'title' => 'Register',
    'page arguments' => [1],
    'access callback' => TRUE,
    'page callback' => 'custom_register_popup',
    'type' => MENU_CALLBACK,
  ];
  $items['inventory'] = [
    'title' => 'Inventory',
    'menu_name' => 'main-menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['custom_inventory_form'],
    'access callback' => 'user_is_logged_in',
  ];
  $items['settings'] = [
    'title' => 'Settings',
    'menu_name' => 'main-menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['custom_settings_form'],
    'access callback' => 'user_is_logged_in',
  ];
  $items['leaderboard'] = [
    'title' => 'Leaderboard',
    'menu_name' => 'main-menu',
    'page callback' => 'custom_leaderboard_page',
    'access callback' => TRUE,
  ];
  $items['admin/settings/site_settings'] = [
    'title' => 'Site settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['site_settings_form'],
    'access arguments' => ['administer content'],
    'weight' => 20,
    'file' => 'site_settings.inc',
  ];

  return $items;
}

/**
 * Implements hook_theme().
 *
 * {@inheritdoc}
 */
function custom_theme($existing, $type, $theme, $path) {
  $templates = DINO_THEME_PATH . '/templates';

  return [
    'header_menu' => [
      'path' => $templates,
      'template' => 'header-menu',
    ],
    'currencies' => [
      'path' => $templates,
      'template' => 'currencies',
    ],
    'dinosaur_info' => [
      'variables' => [
        'dinosaur_entity' => NULL,
      ],
      'path' => $templates,
      'template' => 'dinosaur-info',
    ],
    'dinosaur_undefined_info' => [
      'variables' => [
        'dinosaur_entity' => NULL,
      ],
      'path' => $templates,
      'template' => 'dinosaur-undefined-info',
    ],
  ];
}

/**
 * User register in popup.
 *
 * @param $js
 *
 * @return array|mixed
 */
function custom_register_popup($js) {
  if (!$js) {
    return drupal_get_form('user_register_form');
  }

  ctools_include('ajax');
  ctools_include('modal');

  $form_state = [
    'ajax' => TRUE,
    'title' => t('Register'),
  ];
  $output = ctools_modal_form_wrapper('user_register_form', $form_state);
  print ajax_render($output);
  exit();
}

/**
 * Reload page after register.
 *
 * {@inheritdoc}
 */
function custom_user_register_ajax_callback($form, $form_state) {
  ctools_include('ajax');
  ctools_add_js('ajax-responder');

  print ajax_render([ctools_ajax_command_reload()]);
  drupal_exit();
}

/**
 * Popup's settings function.
 */
function custom_ctools_popup_style() {
  static $added = FALSE;
  if ($added == FALSE) {
    $added = TRUE;

    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_add_js();

    $popup_style = [
      'dino-popup' => [
        'modalSize' => [
          'type' => 'fixed',
          'width' => 450,
          'height' => 'auto',
        ],
        'modalOptions' => [
          'opacity' => (float) 0.8,
          'background-color' => '#ccc',
        ],
        'closeText' => '&times;',
        'loadingText' => '',
        'animation' => 'fadeIn',
        'modalTheme' => 'customPopupTheme',
        'animationSpeed' => 'fast',
      ],
    ];
    drupal_add_js($popup_style, 'setting');
    ctools_add_js('popup_style', 'custom');
  }
}

/**
 * Implements hook_block_info().
 */
function custom_block_info() {
  $blocks = [];

  $blocks['header'] = [
    'info' => 'Header items',
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -1,
    'status' => TRUE,
    'region' => 'header',
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * {@inheritdoc}
 * @throws \Exception
 */
function custom_block_view($delta = '') {
  $block = [];

  switch ($delta) {
    case 'header':
      $block['content'] = [];

      $block['content']['left'] = [
        '#type' => 'container',
        '#attributes' => [
          'class' => ['left'],
        ],
      ];
      $block['content']['left']['menu'] = [
        '#markup' => theme('header_menu'),
      ];

      $block['content']['right'] = [
        '#type' => 'container',
        '#attributes' => [
          'class' => ['right'],
        ],
      ];
      $block['content']['right']['timer'] = drupal_get_form('custom_timer_form');
      $block['content']['right']['catch'] = drupal_get_form('custom_catch_form');
      $block['content']['right']['currency'] = [
        '#markup' => theme('currencies', [
          'meat' => 5,
          'leaves' => 5,
          'quiz_energy' => 3,
        ]),
      ];

      $block['content']['consumables_reward_wrapper'] = [
        '#type' => 'container',
        '#attributes' => [
          'id' => 'consumables-reward-wrapper',
        ],
      ];
      break;

  }

  return $block;
}

/**
 * Form with button and timer if button clicked.
 *
 * {@inheritdoc}
 * @throws \Exception
 */
function custom_timer_form($form, &$form_state) {
  global $user;

  // Wrapper for ajax.
  $form['container'] = [
    '#type' => 'container',
    '#attributes' => [
      'id' => 'timer-wrapper',
    ],
  ];

  if ($user->uid) {
    if ($user->timer <= time()) {
      $form['container']['start_timer'] = [
        '#type' => 'button',
        '#ajax' => [
          'callback' => 'custom_timer_ajax_callback',
          'wrapper' => 'custom-timer-form',
          'progress' => FALSE,
        ],
        '#attributes' => [
          'class' => [
            'icon',
            'icon-treasure',
            'pointer',
          ],
        ],
      ];
    }
    else {
      $form['container']['timer'] = [
        '#markup' => theme('html_tag', [
            'element' => [
              '#tag' => 'span',
              '#attributes' => [
                'class' => ['active-timer', 'text-bottom'],
              ],
              '#value' => date('i:s', $user->timer - time()),
            ],
          ])
          .
          theme('html_tag', [
            'element' => [
              '#tag' => 'div',
              '#attributes' => [
                'class' => ['icon', 'icon-time'],
              ],
            ],
          ]),
      ];
    }

    $form['#attached'] = [
      'js' => [
        drupal_get_path('module', 'custom') . '/js/timer.js',
      ],
    ];
  }

  return $form;
}

/**
 * Ajax callback for timer form.
 *
 * {@inheritdoc}
 * @throws \Exception
 */
function custom_timer_ajax_callback($form, &$form_state) {
  global $user;

  // Save timestamp when user can click the button again.
  $user->timer = time() + variable_get('timer_duration', 30) * 60;
  // Save food ID to user.
  $user_consumables = explode(',', $user->consumables);
  $random_food_id = rand(1, 16);
  array_push($user_consumables, $random_food_id);
  $user->consumables = implode(',', $user_consumables);

  user_save($user);

  $commands = [];
  $custom_timer_form = drupal_get_form('custom_timer_form');
  $custom_inventory_form = drupal_get_form('custom_inventory_form');
  $commands[] = ajax_command_replace(
    '#timer-wrapper',
    drupal_render($custom_timer_form['container'])
  );
  $commands[] = ajax_command_replace(
    '#custom-inventory-form',
    '<div id="custom-inventory-form">' . drupal_render($custom_inventory_form) . '</div>'
  );

  $food_entity = entity_load_single('consumables', $random_food_id);
  $commands[] = ajax_command_html(
    '#consumables-reward-wrapper',
    "<img src='{$food_entity->picture}' alt='{$food_entity->name}'/>"
  );

  return ['#type' => 'ajax', '#commands' => $commands];
}

/**
 * Form with image indicates that bait was established.
 *
 * {@inheritdoc}
 * @throws \Exception
 */
function custom_catch_form($form, &$form_state) {
  global $user;

  if ($user->uid) {
    // Wrapper for ajax.
    $form['container'] = [
      '#type' => 'container',
      '#attributes' => [
        'id' => 'catch-wrapper',
      ],
    ];

    if ($user->catch) {
      $form['container']['img'] = [
        '#markup' => theme('image', [
          'path' => FOOD_PICTURE_DIR . '/other/dish.svg',
          'attributes' => [
            'id' => 'catch-indicator',
          ],
        ]),
      ];
      $form['container']['cancel'] = [
        '#type' => 'button',
        '#value' => t('Remove the bait'),
        '#ajax' => [
          'callback' => 'custom_catch_cancel_ajax_callback',
          'effect' => 'fade',
          'progress' => FALSE,
        ],
        '#attributes' => [
          'class' => ['catch-cancel', 'secondary'],
        ],
      ];
    }
  }

  return $form;
}

/**
 * Cancel catch.
 *
 * {@inheritdoc}
 * @throws \Exception
 */
function custom_catch_cancel_ajax_callback($form, &$form_state) {
  global $user;

  $user_consumables = explode(',', $user->consumables);
  array_push($user_consumables, $user->catch);
  $user->consumables = implode(',', $user_consumables);

  $user->catch = 0;

  user_save($user);

  $custom_catch_form = drupal_get_form('custom_catch_form');
  $custom_inventory_form = drupal_get_form('custom_inventory_form');
  $commands = [];
  $commands[] = ajax_command_replace(
    '#catch-wrapper',
    drupal_render($custom_catch_form['container'])
  );
  $commands[] = ajax_command_replace(
    '#custom-inventory-form',
    '<div id="custom-inventory-form">' . drupal_render($custom_inventory_form) . '</div>'
  );

  return ['#type' => 'ajax', '#commands' => $commands];
}
