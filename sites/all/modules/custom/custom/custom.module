<?php
/**
 * @file
 * Custom functionality for DinoDay site.
 */

/**
 * Implements hook_menu().
 */
function custom_menu() {
  $items = [];

  $items['collection'] = [
    'title' => 'Коллекция',
    'menu_name' => 'main-menu',
    'page callback' => 'custom_collection_page',
    'access callback' => TRUE,
  ];
  $items['food'] = [
    'title' => 'Пища',
    'menu_name' => 'main-menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['custom_food_form'],
    'access callback' => 'user_is_logged_in',
  ];

  return $items;
}

/**
 * Implements hook_block_info().
 */
function custom_block_info() {
  $blocks = [];

  $blocks['timer'] = [
    'info' => 'Timer',
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -1,
    'status' => TRUE,
    'region' => 'header',
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function custom_block_view($delta = '') {
  $block = [];
  switch ($delta) {
    case 'timer':
      $block['content'] = drupal_get_form('custom_timer_form');
      break;
  }
  return $block;
}

/**
 * Form with button and timer if button clicked.
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 * @throws \Exception
 */
function custom_timer_form($form, &$form_state) {
  global $user;

  if ($user->uid) {
    if ($user->timer <= time()) {
      $form['start_timer'] = [
        '#type' => 'button',
        '#value' => 'Получить ингредиент',
        '#ajax' => [
          'callback' => 'custom_timer_ajax_callback',
          'wrapper' => 'custom-timer-form',
          'method' => 'replace',
          'effect' => 'fade',
        ],
      ];
    }
    else {
      $form['timer'] = [
        '#markup' => theme('html_tag', [
          'element' => [
            '#tag' => 'h2',
            '#attributes' => [
              'class' => 'active-timer',
            ],
            '#value' => date('i:s', $user->timer - time()),
          ],
        ]),
      ];
    }

    $form['#attached'] = [
      'js' => [
        drupal_get_path('module', 'custom') . '/js/timer.js',
      ],
    ];
  }

  return $form;
}

/**
 * Ajax callback for timer form.
 *
 * @param $form
 * @param $form_state
 *
 * @return array|mixed
 * @throws \Exception
 */
function custom_timer_ajax_callback($form, &$form_state) {
  global $user;

  // Save timestamp when user can click the button again.
  $user->timer = time() + 30 * 60;
  // Save food ID to user.
  $user->food .= rand(1, 16) . ',';

  user_save($user);

  $commands = [];
  // @todo Looks like it's bad code.
  $commands[] = ajax_command_replace('#custom-timer-form', drupal_render(drupal_get_form('custom_timer_form')));
  $commands[] = ajax_command_replace('#custom-food-form', drupal_render(drupal_get_form('custom_food_form')));

  return ['#type' => 'ajax', '#commands' => $commands];
}

/**
 * Collection page.
 */
function custom_collection_page() {
  $page = [];

  $page['collection'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['dinosaurs-table', 'columns', 'medium-6'],
    ],
  ];
  $page['collection']['dinosaurs'] = drupal_get_form('custom_collection_form');

  $page['dino_info'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['dinosaur-info', 'columns', 'medium-6'],
      'id' => 'dinosaur-info',
    ],
  ];

  return $page;
}

/**
 * From with dinosaurs pictures as buttons.
 */
function custom_collection_form($form, &$from_state) {
  $pictures_path = db_select('eck_dinosaur', 'd')
    ->fields('d', ['picture'])
    ->execute()
    ->fetchCol();

  $options = [];
  foreach ($pictures_path as $value) {
    // @todo Display as black pictures.
    /**
     * list($v1, $v2) = explode('.', $value);
     * $value = "$v1-black.$v2";
     **/
    $options[] = "<img src='{$value}'/>";
  }

  $form['dinosaurs'] = [
    '#type' => 'radios',
    '#options' => $options,
    // @todo Add black disabled options for non-opened dinosaurs.
    // @todo Add ajax callback with display dinosaur info in #dinosaur-info.
  ];

  return $form;
}

/**
 * Food page.
 */
function custom_food_form($form, &$form_state) {
  global $user;

  $form['food_set'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['user-food-block', 'columns', 'medium-6'],
      'id' => 'user-food-block',
    ],
  ];

  $user_food_ids = explode(',', $user->food);
  $food_entities = entity_load('food', $user_food_ids);

  $options = [];
  foreach ($user_food_ids as $id) {
    if (key_exists($id, $food_entities)) {
      $options[] = "<img src='{$food_entities[$id]->picture}' />";
    }
  }
  $form['food_set']['food'] = [
    '#type' => 'checkboxes',
    '#options' => $options,
  ];
  $form['cook_block'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['cook-block', 'columns', 'medium-6'],
      'id' => 'cook-block',
    ],
  ];
  $form['cook_block']['container'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['cook-wrapper'],
    ],
  ];

  // Submit.
  $form['cook_block']['container']['cook'] = [
    '#type' => 'image_button',
    '#src' => FOOD_PICTURE_DIR . '/other/stew-1.svg',
    '#ajax' => [
      'callback' => 'custom_food_ajax_callback',
      'wrapper' => 'user-food-block',
      'method' => 'replace',
      'effect' => 'fade',
    ],
  ];

  return $form;
}

/**
 * Food form submit.
 *
 * @param $form
 * @param $form_state
 *
 * @throws \Exception
 */
function custom_food_ajax_callback($form, &$form_state) {
  global $user;

  // Fetch selected by user food ID's.
  $selected_food = $form_state['values']['food'];
  $selected_food = array_filter($selected_food, function ($v, $k) {
    return is_string($v);
  }, ARRAY_FILTER_USE_BOTH);

  // Remove used food from DB.
  $user_food = explode(',', $user->food);
  foreach ($selected_food as $value) {
    unset($user_food[$value]);
  }
  $user->food = implode(',', $user_food);

  // @todo Save bait of needed level.

  user_save($user);

  // Reload page.
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $commands = [];
  $commands[] = ctools_ajax_command_reload();
  print ajax_render($commands);
  drupal_exit();
}
