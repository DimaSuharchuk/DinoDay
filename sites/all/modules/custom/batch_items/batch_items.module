<?php

/**
 * @file
 * Saving dinosaurs, consumables and jurassic to DB.
 */

module_load_include('inc', 'batch_items', 'includes/dinosaurs');
module_load_include('inc', 'batch_items', 'includes/consumables');
module_load_include('inc', 'batch_items', 'includes/jurassic');

/**
 * Implements hook_menu().
 */
function batch_items_menu() {
  $weight = 10;

  return [
    'admin/settings/batch' => [
      'title' => 'Batch',
      'page callback' => 'drupal_get_form',
      'page arguments' => ['batch_items_form'],
      'access arguments' => ['administer content'],
      'weight' => $weight++,
    ],
  ];
}

/**
 * Form with button for batch starting.
 *
 * {@inheritdoc}
 */
function batch_items_form($form, &$form_state) {
  $dino_default_count = count(_get_dinosaurs());
  $consumables_default_count = count(_get_consumables());
  $jurassic_default_count = count(_get_jurassic_dinosaurs());

  $result = db_select('eck_dinosaur', 'd')
    ->fields('d')
    ->execute();
  $dino_db_count = $result->rowCount();
  $result = db_select('eck_consumables', 'f')
    ->fields('f')
    ->execute();
  $consumables_db_count = $result->rowCount();
  $result = db_select('eck_jurassic', 'j')
    ->fields('j')
    ->execute();
  $jurassic_db_count = $result->rowCount();

  drupal_get_messages();
  drupal_set_message(t('@d dinosaurs in DB now.', ['@d' => $dino_db_count]));
  drupal_set_message(t('@c consumables in DB now.', ['@c' => $consumables_db_count]));
  drupal_set_message(t('@j jurassic dinosaurs in DB now.', ['@j' => $jurassic_db_count]));

  $form['add'] = [
    '#type' => 'submit',
    '#value' => t('Add dinosaurs, consumables and jurassic'),
    '#submit' => ['batch_items_add'],
  ];
  if ($dino_default_count <= $dino_db_count && $consumables_default_count <= $consumables_db_count && $jurassic_default_count <= $jurassic_db_count) {
    $form['add']['#disabled'] = TRUE;
  }

  $form['remove'] = [
    '#type' => 'submit',
    '#value' => t('Remove all dinosaurs, consumables and jurassic'),
    '#submit' => ['batch_items_remove'],
  ];

  return $form;
}

/**
 * Add all dinosaurs, consumables and jurassic to DB from files.
 */
function batch_items_add() {
  $operations = [];

  foreach (_get_dinosaurs() as $i => $dinosaur) {
    $operations[] = [
      'batch_items_dinosaurs_batch',
      [
        $dinosaur,
        t('(Operation @operation)', ['@operation' => $i]),
      ],
    ];
  }
  foreach (_get_consumables() as $i => $consumable) {
    $operations[] = [
      'batch_items_consumables_batch',
      [
        $consumable,
        t('(Operation @operation)', ['@operation' => $i]),
      ],
    ];
  }
  foreach (_get_jurassic_dinosaurs() as $i => $jurassic_dinosaur) {
    $operations[] = [
      'batch_items_jurassic_batch',
      [
        $jurassic_dinosaur,
        t('(Operation @operation)', ['@operation' => $i]),
      ],
    ];
  }

  $batch = [
    'operations' => $operations,
    'finished' => 'batch_items_batch_finished',
  ];

  batch_set($batch);
}

/**
 * Batch operations with dinosaurs.
 *
 * @param $dinosaur
 *  Dinosaur info parsed from file.
 * @param $operation_details
 *  Batch iteration details.
 * @param $context
 *  Batch context.
 */
function batch_items_dinosaurs_batch($dinosaur, $operation_details, &$context) {
  $entity = entity_create('dinosaur', ['type' => 'dinosaur']);
  $wrapper = entity_metadata_wrapper('dinosaur', $entity);
  $wrapper->{'picture'}->set($dinosaur['picture']);
  $wrapper->{'name'}->set($dinosaur['name']);
  $wrapper->{'grade'}->set($dinosaur['grade']);
  $wrapper->{'food_type'}->set($dinosaur['food_type']);
  $wrapper->{'favorite_food'}->set($dinosaur['favorite_food']);
  $wrapper->{'consume'}->set($dinosaur['consume']);
  $wrapper->save();

  $context['results']['count']++;
}

/**
 * Batch operations with consumables.
 *
 * @param $consumables
 *  Consumable info parsed from file.
 * @param $operation_details
 *  Batch iteration details.
 * @param $context
 *  Batch context.
 */
function batch_items_consumables_batch($consumables, $operation_details, &$context) {
  $entity = entity_create('consumables', ['type' => 'consumables']);
  $wrapper = entity_metadata_wrapper('consumables', $entity);
  $wrapper->{'picture'}->set($consumables['picture']);
  $wrapper->{'consumable_type'}->set($consumables['consumable_type']);
  $wrapper->{'name'}->set($consumables['name']);
  $wrapper->save();

  $context['results']['count']++;
}

/**
 * Batch operations with jurassic.
 *
 * @param $jurassic
 *  Jurassic dinosaur's info parsed from file.
 * @param $operation_details
 *  Batch iteration details.
 * @param $context
 *  Batch context.
 */
function batch_items_jurassic_batch($jurassic, $operation_details, &$context) {
  $entity = entity_create('jurassic', ['type' => 'jurassic']);
  $wrapper = entity_metadata_wrapper('jurassic', $entity);
  $wrapper->{'pictures'}->set(implode(',', $jurassic['pictures']));
  $wrapper->{'name'}->set($jurassic['name']);
  $wrapper->{'consume'}->set($jurassic['consume']);
  $wrapper->{'description'}->set($jurassic['description']);
  $wrapper->{'price'}->set($jurassic['price']);
  $wrapper->save();

  $context['results']['count']++;
}

/**
 * Batch finish function.
 *
 * {@inheritdoc}
 */
function batch_items_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(
      format_plural(
        $results['count'],
        '1 element was created.',
        '@count elements were created.'
      )
    );
  }
  else {
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        [
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        ]
      ),
      'error'
    );
  }
}

/**
 * Remove all dinosaurs, consumables and jurassic from DB.
 */
function batch_items_remove() {
  db_truncate('eck_dinosaur')->execute();
  db_truncate('eck_consumables')->execute();
  db_truncate('eck_jurassic')->execute();
}
